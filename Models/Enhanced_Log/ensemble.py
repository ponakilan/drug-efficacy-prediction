# -*- coding: utf-8 -*-
"""Ensemble.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hbFjQ87nJeXh8hNY0m4P4h3oBw-1ZiJO
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

df = pd.read_csv("./dataset/N_500_RELTF.csv")
df.head()

label = ["Paclitaxel","Vincristine","Daunorubicin","Vinblastine","Doxorubicin"]
X = df.drop(columns = label)
y = df[label]
y_new = []
for i,row in y.iterrows():
  max_drug = label[np.argmax(row)]
  y_new.append(max_drug)
y_new_df = pd.DataFrame(y_new)
y_new_df.columns = ["Drug"]

new_dataset = pd.concat([X,y_new_df],axis=1)

labelencoder = LabelEncoder()
y_new_le = labelencoder.fit_transform(y_new)

y_new_df = pd.DataFrame(y_new_le,columns = ["Drug"])


new_dataset = pd.concat([X,y_new_df],axis=1)


X = new_dataset.drop(["Drug"],axis=1)
y = new_dataset["Drug"]



X_train, X_test, y_train, y_test = train_test_split(X, y_new_le, test_size=0.2)

# 1. Train Logistic Regression
log_reg = LogisticRegression(C=0.1, max_iter=5000, class_weight='balanced')
log_reg.fit(X_train, y_train)

# 2. Transform to Probability Space
X_train_proba = log_reg.predict_proba(X_train)
X_test_proba = log_reg.predict_proba(X_test)


#KNN

params = {'n_neighbors': [3,5,7,9,11], 'weights': ['uniform', 'distance']}
knn_gs = GridSearchCV(KNeighborsClassifier(), params, cv=5)

knn_gs.fit(X_train_proba,y_train)
# 4. Predict and Evaluate
y_pred = knn_gs.predict(X_test_proba)



def predict_drug(input):
  proba = log_reg.predict_proba(input)
  pred_encoded = knn_gs.predict(proba)
  pred_label = labelencoder.inverse_transform(pred_encoded)[0]
  return pred_label























